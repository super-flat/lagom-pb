syntax = "proto3";

package lagompb.v1;

option java_package = "io.superflat.lagompb.protobuf.v1";

import "submodules/protobuf/lagompb/v1/extensions.proto";
import "google/protobuf/any.proto";

message TestCmd {
    string company_uuid = 1 [(lagompb.v1.command).entity_id = true];
    string name = 2;
}

// Used to test successful command
// handler response without persisting
// an event
message TestGetCmd {
    string company_uuid = 1 [(lagompb.v1.command).entity_id = true];
}

// It is used to test unhandled
// command handler response
message TestEmptyCmd {
    string company_uuid = 1 [(lagompb.v1.command).entity_id = true];
}

// Used to test Empty command handler
// success response
message TestEmptySuccessCmd {
    string company_uuid = 1 [(lagompb.v1.command).entity_id = true];
}

// Used to handle wrong event emitted by
// the command handler
message TestUnknownEventCmd {
    string company_uuid = 1 [(lagompb.v1.command).entity_id = true];
}

// Used to test a fail command handler response
message TestFailCmd {
    string company_uuid = 1 [(lagompb.v1.command).entity_id = true];
}

// Used to test event handler failure in the aggregate root
message TestEventFailureCmd {
    string company_uuid = 1 [(lagompb.v1.command).entity_id = true];
}

// Event emitted to test event handler failure in the aggregate root
message TestEventFailure {

}

message NoCmd {
}

message WrongEventTagger {
}

message TestEvent {
    string event_uuid = 1 [(lagompb.v1.kafka).partition_key = true];
    string name = 2;
}

message TestState {
    string company_uuid = 1;
    string name = 2;
}

message WrongEvent {
    string event_uuid = 1;
}

message TestAny {
    google.protobuf.Any cmd = 1;
}

enum TestEnum {
    ZERO = 0;
    ONE = 1;
    TWO = 2;
}

message Outer {
    string val = 1;
}
